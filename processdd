#!/usr/bin/env python
from optparse import OptionParser
import time
import re
import os
import ppodd.core

def split_up(option, opt, value, parser): 
    """ Splits up comma separated input and sets to upper case """
    setattr(parser.values, option.dest, value.upper().split(','))

def split_(option, opt, value, parser): 
    """ Splits up comma separated input """
    setattr(parser.values, option.dest, value.split(','))

if __name__=="__main__":    
    usage="usage: %prog [options] files input_file1:type1 input_file2:type2 .. input_filen:typen [-o output_file[:type]]"
    parser=OptionParser(usage=usage)
    parser.add_option("-o","--output",dest="output",
           help="Output file or folder",metavar="OUTPUT",default=None)
    parser.add_option("-r","--revision",dest="revision",
           help="Output revision number",metavar="N",default=0,type='int')
    parser.add_option("-p","--parameters",dest="paras",
           help="Parameters to output ",metavar="p1,p2...pn or all",default=None,
           action='callback',callback=split_,type='string')
    parser.add_option("-m","--modules",dest="calmods",
           help="Only run these modules ",metavar="mod1,mod2..modn",default=[],
           action='callback',callback=split_up,type='string')
    parser.add_option("-n","--not_modules",dest="nocals",
           help="Don't run these modules ",
           metavar="mod1,mod2..modn",default=[],
           action='callback',callback=split_up,type='string')
    parser.add_option("-1","--1hz",dest="onehz",action="store_true",
           help="Produce 1Hz file",metavar="1hz",default=False)
    parser.add_option("-b","--both",dest="both",action="store_true",
           help="Produce 1Hz + full file",metavar="both",default=False)

    (options,args)=parser.parse_args()
    if(args):
        d=ppodd.core.decades_dataset()
        for i in range(len(args)):
            d.add_file(args[i])
        outtype=''
        if(options.output):
            out=options.output.split(':')
            if(len(out)>1):
                outtype=out[1]
            out=out[0]
        if(option.calmods):
            d.cals=options.calmods
        if(option.nocals):
            d.nocals=options.nocals

        if(options.paras!='all'):
            d.outparas=options.paras
        d.process()
        if(options.revision):
            d.revision=options.revision
        if(options.both or (not options.onehz):
            d.write_nc.process(out,outtype,paras=options.paras)
        if(options.both or options.onehz):
            if(out):
                if(options.both):
                    out=out[:out.index('.')]+'_1hz.nc'
            d.write_nc.process(out,outtype,paras=options.paras,onehz=True)
    else:
        parser.print_help()
