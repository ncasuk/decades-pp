#!/usr/bin/env python
from ppodd.gui.main import *
from ppodd.core import decades_dataset
from optparse import OptionParser

def split_up(option, opt, value, parser): 
    """ Splits up comma separated input and sets to upper case """
    setattr(parser.values, option.dest, value.upper().split(','))

def split_(option, opt, value, parser): 
    """ Splits up comma separated input """
    setattr(parser.values, option.dest, value.split(','))

def times(option, opt, value, parser):
    """ Converts input times to seconds past midnight """
    t=value.split(':')
    t=int(t[0])*3600+int(t[1])*60+int(t[2])
    setattr(parser.values, option.dest, t)

if __name__=="__main__":   
    usage="usage: %prog [options] constants_file input_file1:type1 input_file2:type2 .. input_filen:typen [-o output_file[:type]]"
    parser=OptionParser(usage=usage)
    parser.add_option("-o","--output",dest="output",
           help="Output file or folder",metavar="OUTPUT",default="")
    parser.add_option("-r","--revision",dest="revision",
           help="Output revision number",metavar="N",default=0,type='int')
    parser.add_option("-p","--parameters",dest="paras",
           help="Parameters to output ",metavar="p1,p2...pn or all",default=None,
           action='callback',callback=split_,type='string')
    parser.add_option("-m","--modules",dest="calmods",
           help="Only run these modules ",metavar="mod1,mod2..modn",default=[],
           action='callback',callback=split_up,type='string')
    parser.add_option("-n","--not_modules",dest="nocals",
           help="Don't run these modules ",
           metavar="mod1,mod2..modn",default=[],
           action='callback',callback=split_up,type='string')
    (options,args)=parser.parse_args()
    foundconst=None
    d=decades_dataset()
    for i in range(len(args)):
        """ Split arguments into files and types 
        default type is CONST (flight constants) for first argument
        CRIO for others or CRIOS if a folder """
        opt=args[i].split(':')
        df=d.DecadesFile(*opt)
        d.add_file(*df.astuple())
    if(options.output!=""):
        opt=options.output.split(':')
        if (len(opt)<2):
            opt.append('OUTPUT')
        else:
            opt[1]='OUTPUT_'+opt[1]
        d.add_file(*opt)
    d.revision=options.revision
    colour='honeydew'
    m=main(data=d,bg=colour)
    Tk.mainloop()

